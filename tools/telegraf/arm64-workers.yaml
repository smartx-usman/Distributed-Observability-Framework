apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-arm64-worker
  namespace: measurement
  labels:
    k8s-app: telegraf
data:
  telegraf.conf: |+
    [agent]
      interval= "10s"
      round_interval= true
      metric_batch_size= 1000
      metric_buffer_limit= 10000
      collection_jitter= "0s"
      flush_interval= "1s"
      flush_jitter= "0s"
      precision= ""
      debug= false
      quiet= true
      logfile= ""
      hostname= "$HOSTNAME"
      omit_hostname= false
    
      #[[outputs.kafka]]
      #brokers = ["bitnami-kafka-headless.observability.svc.cluster.local:9092"]
      #topic = "overcloud"
      #data_format = "json"
      #[outputs.kafka.topic_suffix]
      #  method = "measurement"
      #  separator = "_"
    
    #[[outputs.influxdb_v2]]
      #urls=["http://IP-ADDRESS:PORTNO"]
      #token = "<All access API token generated in UI>"
      #organization="6gpath"
      #bucket="observability"
      #timeout="15s"
    
    [[outputs.prometheus_client]]
      ## Address to listen on.
      listen = ":9126"
      collectors_exclude = ["gocollector", "process"]

    #[[outputs.amqp]]
      #namepass = ["kubernetes_pod_container"]
      #brokers = ["amqp://rabbitmq-headless.measurement.svc.cluster.local:5672"]
      #      exchange = "telegraf"
      #      exchange_type = "direct"
      #      exchange_durability = "transient"
      #      routing_key = "telegraf-kubernetes"
      #      auth_method = "PLAIN"
      #      username = "user"
      #     password = "user"
      #     headers = {"database" = "telegraf", "retention_policy" = "default"}
                   
    [[inputs.cpu]]
      percpu = true
      totalcpu = true
      collect_cpu_time = false
      report_active = false
      fieldinclude = ["usage_user", "usage_system", "usage_idle", "usage_active", "usage_nice", "usage_iowait", "usage_irq", "usage_softirq", "usage_steal", "usage_guest", "usage_guest_nice"]
    [[inputs.disk]]
      ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "loop*"]
      mount_points = ["/", "/home"]
      fieldinclude = ["free", "used", "total", "used_percent"]
    [[inputs.diskio]]
      devices = ["sd*", "vda", "nvme*", "mmc*"]
      fieldinclude = ["read_time", "write_time", "read_bytes", "write_bytes", "io_time"]
    [[inputs.mem]]
      fieldinclude = ["available", "free", "total", "used_percent"]
    [[inputs.net]]
      interfaces= ["eth*", "ens*", "eno*", "wg*", "enp*"]
      ignore_protocol_stats= true
    [[inputs.system]]
      fieldinclude = ["load1", "load5", "load15"]
    [[inputs.temp]]
      metric_format = "v2"
    #[[inputs.intel_powerstat]]
    #  package_metrics = ["current_power_consumption"]
    [[inputs.kubernetes]]
      interval = "10s"
      url = "https://$HOSTIP:10250"
      #bearer_token_string = "$TELEGRAF_TOKEN"
      insecure_skip_verify = true
      namepass = ["kubernetes_pod_container", "kubernetes_pod_volume", "kubernetes_pod_network"]    
    [[inputs.docker]]
      endpoint = "unix:///var/run/docker.sock"
      perdevice_include = ["cpu", "blkio", "network"]
      total_include = ["cpu", "blkio", "network"]

    #[[outputs.execd]]
    #   namepass = ["kubernetes_pod_container"]
    #   command = ["python3", "/data-analyzer.py"]
    
    #[[aggregators.minmax]]
    #   period = "10s"        # send & clear the aggregate every 30s.
    #   drop_original = false  # drop the original metrics.
    #   namepass = ["kubernetes"]   # only "pass" swap metrics through the aggregator.

---
# Section: Daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: telegraf-arm64-worker
  namespace: measurement
  labels:
    k8s-app: telegraf
spec:
  selector:
    matchLabels:
      name: telegraf
  template:
    metadata:
      labels:
        name: telegraf
    spec:
      serviceAccountName: telegraf
      hostNetwork: true
      nodeSelector:
        kubernetes.io/arch: arm64
      containers:
        - name: edge-metrics-analyzer
          image: usman476/telegraf-data-analyzer:latest
          command: [ "python3" ]
          args: [ "data-analyzer.py", "-n", "uc1", "-a", "app-1-pod", "-m", "memory_usage_bytes", "-v", "50000000", "-r", "amqp://user:user@rabbitmq-headless.measurement.svc.cluster.local:5672/%2F" ]
          imagePullPolicy: "Always"
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 50Mi
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          env:
            - name: HOSTIP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

        - name: telegraf
          image: telegraf:1.35.2-alpine
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
          #args:
          #  - "--user telegraf:$(stat -c '%g' /var/run/docker.sock)"
          resources:
            limits:
              cpu: 150m
              memory: 150Mi
            requests:
              cpu: 25m
              memory: 25Mi
          #securityContext:
          #  runAsUser: 1001
          #  runAsGroup: 1001
          env:
            - name: HOSTIP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: "HOST_PROC"
              value: "/rootfs/proc"
            - name: "HOST_SYS"
              value: "/rootfs/sys"
            #- name: "TELEGRAF_TOKEN"
            #  valueFrom:
            #    secretKeyRef:
            #      name: telegraf-measurement-secret
            #      key: token
          volumeMounts:
            - name: sys
              mountPath: /rootfs/sys
              readOnly: true
            - name: proc
              mountPath: /rootfs/proc
              readOnly: true
            - name: docker-socket
              mountPath: /var/run/docker.sock
            - name: utmp
              mountPath: /var/run/utmp
              readOnly: true
            - name: config
              mountPath: /etc/telegraf
      terminationGracePeriodSeconds: 10
      volumes:
        - name: sys
          hostPath:
            path: /sys
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: proc
          hostPath:
            path: /proc
        - name: utmp
          hostPath:
            path: /var/run/utmp
        - name: config
          configMap:
            name: telegraf-arm64-worker