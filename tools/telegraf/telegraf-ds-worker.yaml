apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-worker
  namespace: measurement
  labels:
    k8s-app: telegraf
data:
  telegraf.conf: |+
    [agent]
      interval= "10s"
      round_interval= true
      metric_batch_size= 1000
      metric_buffer_limit= 10000
      collection_jitter= "0s"
      flush_interval= "1s"
      flush_jitter= "0s"
      precision= ""
      debug= false
      quiet= false
      logfile= ""
      hostname= "$HOSTNAME"
      omit_hostname= false
    
      #[[outputs.kafka]]
      #brokers = ["bitnami-kafka-headless.observability.svc.cluster.local:9092"]
      #topic = "overcloud"
      #data_format = "json"
      #[outputs.kafka.topic_suffix]
      #  method = "measurement"
      #  separator = "_"
    
    [[outputs.prometheus_client]]
          ## Address to listen on.
          listen = ":9126"
          collectors_exclude = ["gocollector", "process"]

    [[inputs.cpu]]
      percpu = true
      totalcpu = true
      collect_cpu_time = false
      report_active = false
      fieldinclude = ["usage_user", "usage_system", "usage_idle", "usage_active", "usage_nice", "usage_iowait", "usage_irq", "usage_softirq", "usage_steal", "usage_guest", "usage_guest_nice"]
    [[inputs.disk]]
      ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "loop*"]
      fieldinclude = ["free", "used", "total", "used_percent"]
    [[inputs.diskio]]
      devices = ["sda", "sdb", "sdc", "vda"]
      fieldinclude = ["read_time", "write_time", "reads", "writes", "io_time"]
    [[inputs.docker]]
      endpoint = "unix:///var/run/docker.sock"
      perdevice_include = ["cpu", "blkio", "network"]
      total_include = ["cpu", "blkio", "network"]
    [[inputs.mem]]
      fieldinclude = ["available", "free", "total", "used_percent"]
    [[inputs.net]]
      interfaces= ["eth*", "ens*", "tap*"]
      ignore_protocol_stats= true
    [[inputs.system]]
      fieldinclude = ["load1", "load5", "load15"]
    [[inputs.exec]]
      commands = ["bash /scripts/vpp-interfaces-parser.sh", "bash /scripts/vpp-rate-parser.sh"]
      data_format = "influx"
    [[inputs.kubernetes]]
      interval = "10s"
      url = "https://$HOSTIP:10250"
      bearer_token_string = "$TELEGRAF_TOKEN"
      insecure_skip_verify = true
      namepass = ["kubernetes_pod_container", "kubernetes_pod_volume", "kubernetes_pod_network"]


#    [[outputs.execd]]
#      namepass = ["kubernetes_pod_container"]
#      command = ["python3", "/data-analyzer.py"]

#    [[aggregators.minmax]]
#      period = "10s"        # send & clear the aggregate every 30s.
#      drop_original = false  # drop the original metrics.
#      namepass = ["kubernetes"]   # only "pass" swap metrics through the aggregator.


#---
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: vpp-rate-parser
#  namespace: measurement
#data:
#  vpp-rate-parser.sh: |
#    #!/bin/bash
    
#    vpp_rate_file="/vpp-metrics/vpp_rate.txt"
    
#    if [ ! -f "$vpp_rate_file" ]; then
#        echo "Error: File '$vpp_rate_file' not found!"
#        exit 1
#    fi
    
#    # Parse the file and print the metrics
#    awk '{interface=$1; state=$2; calls=$3; vectors=$4; suspends=$5; clocks=$6; rate=$7; printf "vpp_rate,interface=%s,state=%s calls=%si,vectors=%si,suspends=%si,clocks=%si,rate=%si\n", interface, state, calls, vectors, suspends, clocks, rate}' "$vpp_rate_file"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vpp-interfaces-parser
  namespace: measurement
data:
  vpp-rate-parser.sh: |
    #!/bin/bash
    
    vpp_rate_file="/vpp-metrics/vpp_rate.txt"
    
    if [ ! -f "$vpp_rate_file" ]; then
        echo "Error: File '$vpp_rate_file' not found!"
        exit 1
    fi
    
    # Parse the file and print the metrics
    while IFS= read -r line; do
      # Skip empty lines
      if [[ -z "$line" ]]; then
          continue
      fi

      interface=$(echo "$line" | awk '{print $1}')
      state=$(echo "$line" | awk '{print $2}')
      calls=$(echo "$line" | awk '{print $3}')
      vectors=$(echo "$line" | awk '{print $4}')
      suspends=$(echo "$line" | awk '{print $5}')
      clocks=$(echo "$line" | awk '{print sprintf("%.0f", $6)}')
      rate=$(echo "$line" | awk '{print sprintf("%.0f", $7)}')
    
      echo "vpp_rate,interface=$interface,state=$state calls=${calls}i,vectors=${vectors}i,suspends=${suspends}i,clocks=${clocks}i,rate=${rate}"
    
      #awk '{interface=$1; state=$2; calls=$3; vectors=$4; suspends=$5; clocks=sprintf("%.0f", $6); rate=$7; printf "vpp_rate,interface=%s,state=%s calls=%si,vectors=%si,suspends=%si,clocks=%si,rate=%si\n", interface, state, calls, vectors, suspends, clocks, rate}' "$vpp_rate_file"
    done < "$vpp_rate_file"

  vpp-interfaces-parser.sh: |
    #!/bin/bash
    
    metrics_file="/vpp-metrics/interface_metrics.txt"
    
    if [ ! -f "$metrics_file" ]; then
        echo "Error: File '$metrics_file' not found!"
        exit 1
    fi
    
    # Initialize variables to hold interface details
    interface=""
    idx=""
    state=""
    mtu=""
    current_counters=""
    rx_packets=0
    tx_packets=0
    rx_bytes=0
    tx_bytes=0
    rx_errors=0
    tx_errors=0
    
    # Function to print current interface details
    print_interface_details() {
        if [ -n "$interface" ]; then
            echo "$interface,$idx,$state,$mtu$current_counters"
        fi
    }
    
    # Flag to skip the first two lines
    skip_lines=2
    
    # Loop through each line in the file
    while IFS= read -r line; do
        if [ $skip_lines -gt 0 ]; then
            ((skip_lines--))
            continue
        fi
    
        # If the line starts with spaces, it's a continuation of the previous line
        if [[ $line == " "* ]]; then
            # Check for lines with "tx packets", "tx bytes", "rx packets", and "rx bytes"
            if [[ $line == *"tx packets"* ]]; then
                current_counters="$current_counters,tx-packets=$(echo "$line" | awk '{print $NF}')"
                tx_packets="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"
            elif [[ $line == *"tx bytes"* ]]; then
                tx_bytes="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"
                current_metric="$(echo "$line" | awk '{print $NF}')"
                current_counters="$current_counters,tx-bytes=$current_metric" 
            elif [[ $line == *"tx-error"* ]]; then
                tx_errors="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"
            elif [[ $line == *"rx packets"* ]]; then
                rx_packets="$(echo "$line" | awk '{print $NF}')"
                current_counters="$current_counters,rx-packets=$(echo "$line" | awk '{print $NF}')"
            elif [[ $line == *"rx bytes"* ]]; then
                rx_bytes="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"
                current_counters="$current_counters,rx-bytes=$(echo "$line" | awk '{print $NF}')"
            elif [[ $line == *"rx-error"* ]]; then
                rx_errors="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"  
            else
                # Extract other metrics from the continued line
                metric_name=$(echo "$line" | awk '{print $1}')
                metric_value=$(echo "$line" | awk '{print $NF}' | tr -d '\r')
                # Append metric to current counters
                current_counters="$current_counters,$metric_name=$metric_value"
            fi
        else
            # Print previous interface details, if any
            #print_interface_details
            if [ -n "$interface" ]; then
                echo "vpp,interface=$interface,idx=$idx,state=$state,mtu=$mtu rx_packets=${rx_packets}i,tx_packets=${tx_packets}i,rx_bytes=${rx_bytes}i,tx_bytes=${tx_bytes}i,rx_errors=${rx_errors}i,tx_errors=${tx_errors}i"    
            fi
            
            # Extract new interface details from the line
            interface=$(echo "$line" | awk '{print $1}')
            idx=$(echo "$line" | awk '{print $2}')
            state=$(echo "$line" | awk '{print $3}')
            mtu=$(echo "$line" | awk '{print $4}')
            # Extract metrics from the line
            metrics=$(echo "$line" | awk '{$1=""; $2=""; $3=""; $4=""; print}')
    
            # Reset current counters
            rx_packets=0
            tx_packets=0 
            rx_bytes=0
            tx_bytes=0
            rx_errors=0
            tx_errors=0
            current_counters=""
            # Append metrics to current counters
            while IFS= read -r metric; do
                if [[ $line == *"tx packets"* ]]; then
                    tx_packets="$(echo "$metric" | awk '{print $NF}' | tr -d '\r')"
                elif [[ $line == *"tx bytes"* ]]; then
                    tx_bytes="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"
                elif [[ $line == *"tx-error"* ]]; then
                    tx_errors="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"
                elif [[ $line == *"rx packets"* ]]; then
                    rx_packets="$(echo "$metric" | awk '{print $NF}' | tr -d '\r')"
                elif [[ $line == *"rx bytes"* ]]; then
                    rx_bytes="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"
                elif [[ $line == *"rx-error"* ]]; then
                    rx_errors="$(echo "$line" | awk '{print $NF}' | tr -d '\r')"  
                else
                    metric_name=$(echo "$metric" | awk '{print $1}')
                    metric_value=$(echo "$metric" | awk '{print $NF}' | tr -d '\r')
                fi
    
                current_counters="$current_counters,$metric_name=$metric_value"
            done <<< "$metrics"
        fi
        
    done < "$metrics_file"
    if [ -n "$interface" ]; then
        echo "vpp,interface=$interface,idx=$idx,state=$state,mtu=$mtu rx_packets=${rx_packets}i,tx_packets=${tx_packets}i,rx_bytes=${rx_bytes}i,tx_bytes=${tx_bytes}i,rx_errors=${rx_errors}i,tx_errors=${tx_errors}i"
    fi

---
# Section: Daemonset
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: telegraf-workers
  namespace: measurement
  labels:
    k8s-app: telegraf
spec:
  selector:
    matchLabels:
      name: telegraf
  template:
    metadata:
      labels:
        name: telegraf
    spec:
      hostNetwork: true
      serviceAccountName: telegraf
      containers:
        - name: telegraf
          image: telegraf:latest
          #args:
          #  - "--user telegraf:$(stat -c '%g' /var/run/docker.sock)"
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 25m
              memory: 50Mi
          securityContext:
            runAsUser: 995
            runAsGroup: 995
          env:
            - name: HOSTIP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: "HOST_PROC"
              value: "/rootfs/proc"
            - name: "HOST_SYS"
              value: "/rootfs/sys"
            - name: "TELEGRAF_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: telegraf-measurement-secret
                  key: token
          volumeMounts:
            - name: sys
              mountPath: /rootfs/sys
              readOnly: true
            - name: proc
              mountPath: /rootfs/proc
              readOnly: true
            - name: docker-socket
              mountPath: /var/run/docker.sock
            - name: utmp
              mountPath: /var/run/utmp
              readOnly: true
            - name: config
              mountPath: /etc/telegraf
            - name: vpp-interfaces-parser-volume
              mountPath: /scripts
            #- name: vpp-rate-parser-volume
            #  mountPath: /scripts
            - name: vpp-interfaces-volume
              mountPath: /vpp-metrics/interface_metrics.txt
            - name: vpp-rate-volume
              mountPath: /vpp-metrics/vpp_rate.txt
            #- name: vpp-cli-dir
              #mountPath: /host-vppctl
      terminationGracePeriodSeconds: 10
      volumes:
        - name: sys
          hostPath:
            path: /sys
        - name: docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: proc
          hostPath:
            path: /proc
        - name: utmp
          hostPath:
            path: /var/run/utmp
        - name: config
          configMap:
            name: telegraf-worker
        - name: vpp-interfaces-parser-volume
          configMap:
            name: vpp-interfaces-parser
       # - name: vpp-rate-parser-volume
       #   configMap:
       #     name: vpp-rate-parser
        - name: vpp-interfaces-volume
          hostPath:
            path: /opt/interface_metrics.txt
        - name: vpp-rate-volume
          hostPath:
            path: /opt/vpp_rate.txt
            #- name: vpp-cli-dir
            #hostPath:
            #path: /usr/bin/