---
- hosts: all
  become: yes
  tasks:
    - name: Upgrade the OS (apt-get dist-upgrade)
      apt:
        upgrade: dist

    - name: Install the latest version of packages
      ansible.builtin.package:
        name:
          - curl
          - gnupg2
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - systemd-timesyncd
          - linuxptp
        state: latest

    - name: Setup timezone
      command: timedatectl set-timezone Europe/Stockholm

    - name: Create required directories for persistent volumes
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755
      with_items:
        - /opt/data

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      #  src: none
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      #when: ansible_swaptotal_mb > 0

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory

    - name: Add Kubernetes apt-key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        keyring: /etc/apt/keyrings/kubernetes.gpg
        state: present

    - name: Add Kubernetes' apt repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        state: present
        filename: 'kubernetes'
        update_cache: true

    - name: Add Docker's apt-key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Add Docker's APT repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: 'docker'
        update_cache: true

    - name: Install kubeadm, kubelet and containerd.io
      ansible.builtin.package:
        name:
          - kubelet
          - kubeadm
          - containerd.io

    - name: Hold tools
      command: apt-mark hold kubelet kubeadm

    - name: Grant permission for Telegraf to get metrics
      command: chmod -R a+rx /sys/devices/virtual/powercap/intel-rapl/

    - name: Creates an entry in cron to re-grant permission to file on reboot
      ansible.builtin.cron:
        name: "a job for reboot"
        state: present
        special_time: reboot
        user: "root"
        cron_file: "powercap"
        job: "chmod -R a+rx /sys/devices/virtual/powercap/intel-rapl/"

    - name: Add kernel modules
      shell: |
        sudo modprobe overlay
        sudo modprobe br_netfilter
        sudo modprobe rapl
        sudo modprobe msr
        sudo modprobe intel_rapl_common

    - name: Sysctl config for kubernetes.conf. Create file if not exists
      blockinfile:
        path: /etc/sysctl.d/kubernetes.conf
        block: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        create: true

    - name: Reload sysctl
      shell: sysctl --system

    - name: Sysctl config for 99-kubernetes-cri.conf. Create file if not exists
      blockinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        create: true

    - name: Reload sysctl
      shell: sysctl --system

    - name: Persistent loading of modules. Create file if not exists
      blockinfile:
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter
          rapl
          msr
          intel_rapl_common
        create: true

    - name: Creates containerd config directory
      file:
        path: /etc/containerd
        state: directory

    - name: Remove file (delete file)
      ansible.builtin.file:
        path: /etc/containerd/config.toml
        state: absent

    - name: containerd default configuration
      ansible.builtin.shell: containerd config default >> /etc/containerd/config.toml


    - name: containerd default configuration
      ansible.builtin.shell: sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

#    - name: Configure the systemd cgroup driver
#      lineinfile:
#        path: /etc/containerd/config.toml
#        regexp: '^SystemdCgroup = false$'
#        #insertafter: '^\s*\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]\s*$'
#        line: '            SystemdCgroup = true'


    - name: Create crictl config file.
      blockinfile:
        path: /etc/crictl.yaml
        block: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          timeout: 2
          debug: false
        create: true

    - name: Restart containerd service
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

    - name: Remove useless packages from the cache
      apt:
        autoclean: yes

    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes

- hosts: worker1
  become: yes
  tasks:
    - name: Set sysctl
      ansible.posix.sysctl:
        name: kernel.sched_rt_runtime_us
        value: '-1'
        sysctl_set: yes
        #     state: present
        sysctl_file: /etc/sysctl.conf
        reload: yes

    - name: Install Kata-container from snap
      command: snap install kata-containers --stable --classic

    - name: Create kata-containers config directory
      file:
        path: /etc/kata-containers
        state: directory

    - name: Copy Kata-container config file and create symlink
      shell: |
        cp /snap/kata-containers/current/usr/share/defaults/kata-containers/configuration.toml /etc/kata-containers/
        ln -sf /snap/kata-containers/current/usr/bin/containerd-shim-kata-v2 /usr/local/bin/containerd-shim-kata-v2

    - name: Persistent loading of modules.
      blockinfile:
        path: /etc/modules-load.d/kata-container.conf
        block: |
          vhost-vsock
          vhost-net
        create: true

    - name: Add the vhost-net module
      community.general.modprobe:
        name: vhost-net
        state: present

    - name: Add the vhost-vsock module
      community.general.modprobe:
        name: vhost-vsock
        state: present

    - name: Configure the systemd cgroup driver
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^runtime_type = "io.containerd.kata.v2"$'
        insertafter: '^\s*SystemdCgroup = true\s*$'
        line: '{{ item }}'
      with_items:
        - '            ConfigPath = "/etc/kata-containers/configuration.toml"'
        - '          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata.options]'
        - '          SandboxCgroupOnly=false'
        - '          privileged_without_host_devices = true'
        - '          runtime_type = "io.containerd.kata.v2"'
        - '        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]'

    - name: Create cgroup mount directory
      file:
        path: /sys/fs/cgroup/systemd
        state: directory

    - name: Enable cgroup mount to avoid cgroup mounting error
      command: mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd

    - name: Restart containerd service
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: containerd

- hosts: master
  become: yes
  tasks:
    - name: install kubectl
      apt:
        name: kubectl
        state: present
        force: yes

    - name: Hold tools
      command: apt-mark hold kubectl